name: Validate JIRA Automation Coverage

on:
  workflow_dispatch:
    inputs:
      fix_version_link:
        description: 'JIRA Fix Version Link'
        required: true
        type: string
  push:
    branches:
      - '**'   # Triggers on any branch

jobs:
  validate_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf ~/.cache
          df -h

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          pip install requests
          pip install jira  # JIRA Python library
          pip install openai

      - name: Extract JIRA issues for Fix Version
        id: get_jira_issues
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: "https://shalinithilakan.atlassian.net"
        run: |
          JIRA_API_URL="https://shalinithilakan.atlassian.net/rest/api/2/search?jql=fixVersion=${{ github.event.inputs.fix_version_link }}"
          RESPONSE=$(curl -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" -X GET -H "Content-Type: application/json" "$JIRA_API_URL")
          ISSUES=$(echo "$RESPONSE" | jq -r '.issues' | tr '\n' ' ' | sed 's/"/\\"/g') 

          #ISSUES=$(echo "$RESPONSE" | tr '\n' ' ' | sed 's/"/\\"/g') 

          if [[ -z "$ISSUES" || "$ISSUES" == "null" ]]; then
            echo "❌ No issues found in JIRA fix version."
            exit 1
          fi

          echo "✅ Fetched Issues"
          echo "$ISSUES"

          # # Save the full JSON response to a file
          echo "$ISSUES" > jira_issues.json

          # Store in GitHub Actions Environment Variable safely
          # echo "ISSUES<<EOF" >> $GITHUB_ENV
          # echo "$ISSUES" >> $GITHUB_ENV
          # echo "EOF" >> $GITHUB_ENV

      - name: Extract acceptance criteria
        id: extract_criteria
        run: |
          # python scripts/extract_acceptance_criteria.py > criteria.json
          #python scripts/extract_acceptance_criteria.py "${{ env.ISSUES }}" > criteria.json         

      - name: Search for Feature Files and Step Definitions
        id: fetch_tests
        run: |
          FEATURE_FILES=$(find ./src/test/resources/features -name "*.feature")
          STEP_DEF_FILES=$(find ./src/test/java/stepdefinitions -name "*.java")

          if [[ -z "$FEATURE_FILES" || -z "$STEP_DEF_FILES" ]]; then
            echo "❌ No test automation files found."
            exit 1
          fi

          echo "✅ Found Feature Files:"
          echo "$FEATURE_FILES"
          echo "✅ Found Step Definitions:"
          echo "$STEP_DEF_FILES"

          # Store multi-line values correctly in GitHub environment
          {
            echo "FEATURE_FILES<<EOF"
            echo "$FEATURE_FILES"
            echo "EOF"
          } >> "$GITHUB_ENV"

          {
            echo "STEP_DEF_FILES<<EOF"
            echo "$STEP_DEF_FILES"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Verify automation coverage
        id: check_coverage
        run: |
          python scripts/validate_coverage_DS.py "${{ env.FEATURE_FILES }}" "${{ env.STEP_DEF_FILES }}" > coverage_report.json

